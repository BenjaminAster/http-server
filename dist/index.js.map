{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport * as HTTP from \"node:http\";\nimport * as HTTPS from \"node:https\";\nimport * as FS from \"node:fs/promises\";\nimport * as Path from \"node:path\";\n\nimport * as SelfSigned from \"selfsigned\";\n\nimport mimeTypes from \"@benjaminaster/mime-types\";\n\nconst cmdArgs = new Map<string, string | boolean>();\nconst standaloneCmdArgs: string[] = [];\n\n{\n\tconst cmdArgsSingleLetterAliases = {\n\t\tp: \"port\",\n\t\ts: \"https\",\n\t};\n\n\tfor (let i = 2; i < process.argv.length; i++) {\n\t\tlet arg = process.argv[i];\n\t\tif (process.argv[i + 1]?.startsWith(\".\")) {\n\t\t\targ += process.argv[++i];\n\t\t}\n\t\tif (arg.startsWith(\"-\")) {\n\t\t\tlet [key, value = true] = arg.split(\"=\");\n\t\t\tif (key.startsWith(\"--\")) {\n\t\t\t\tkey = key.slice(2);\n\t\t\t} else {\n\t\t\t\tkey = key.slice(1);\n\t\t\t\tif (key in cmdArgsSingleLetterAliases) {\n\t\t\t\t\tkey = cmdArgsSingleLetterAliases[key];\n\t\t\t\t}\n\t\t\t}\n\t\t\tcmdArgs.set(key, value);\n\t\t} else {\n\t\t\tstandaloneCmdArgs.push(arg);\n\t\t}\n\t}\n}\n\nmimeTypes[\".md\"] = \"text/html;charset=utf-8\";\n\nlet useHTTPS = cmdArgs.has(\"https\");\nlet port = +cmdArgs.get(\"port\") || (useHTTPS ? 443 : 80);\n\nlet key: string, cert: string;\nif (useHTTPS) {\n\t({ private: key, cert } = await new Promise<SelfSigned.GenerateResult>((resolve, reject) => {\n\t\tSelfSigned.generate([{ name: \"commonName\", value: \"localhost\" }], {}, (error, result) => error ? reject(error) : resolve(result))\n\t}));\n}\n\nlet HTTPOrHTTPSModule = (useHTTPS ? HTTPS : HTTP) as typeof HTTPS;\n\nconst corsHeaders = {\n\t\"access-control-allow-origin\": \"*\",\n\t\"access-control-allow-private-network\": \"true\",\n};\n\nconst server = HTTPOrHTTPSModule.createServer({ ...(useHTTPS ? { cert, key } : {}) }, async (request, response) => {\n\tconst originalPathname = new URL(request.url, \"http://a\").pathname;\n\tlet pathname = global.decodeURIComponent(originalPathname);\n\tif (pathname.endsWith(\"/\")) pathname += \"index.html\";\n\tconst path = Path.join(process.cwd(), pathname);\n\n\tconsole.log(request.method, originalPathname, `HTTP/${request.httpVersion}`);\n\tfor (const [header, value] of Object.entries(request.headers)) {\n\t\tconsole.log(`${header}:`, value);\n\t}\n\tconsole.log(\"-\".repeat(60));\n\n\tlet fileExists = false;\n\ttry {\n\t\tawait FS.access(path, FS.constants.R_OK);\n\t\tfileExists = true;\n\t} catch { };\n\n\tif (fileExists) {\n\t\tconst fileExtension = path.match(/\\.[a-z]+$/)?.[0];\n\t\tconst contentType = mimeTypes[fileExtension] ?? `text/${fileExtension?.slice(1) || \"plain\"};charset=utf-8`;\n\t\tresponse.writeHead(200, {\n\t\t\t...corsHeaders,\n\t\t\t\"content-type\": contentType,\n\t\t});\n\t\tresponse.write(await FS.readFile(path));\n\t\tresponse.end();\n\t} else {\n\t\tif (pathname === \"/favicon.ico\") {\n\t\t\tresponse.writeHead(200, {\n\t\t\t\t...corsHeaders,\n\t\t\t\t\"content-type\": \"image/svg+xml;charset=utf-8\",\n\t\t\t});\n\t\t\tresponse.write([\n\t\t\t\t`<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 480 480\" style=\"color-scheme: dark light;\">`,\n\t\t\t\t`\\t<polygon points=\"240 0, 480 240, 240 480, 0 240\" fill=\"CanvasText\" />`,\n\t\t\t\t`</svg>`,\n\t\t\t].join(\"\\n\"));\n\t\t\tresponse.end();\n\t\t} else {\n\t\t\tresponse.writeHead(404, {\n\t\t\t\t...corsHeaders,\n\t\t\t\t\"content-type\": \"text/html;charset=utf-8\",\n\t\t\t});\n\t\t\tresponse.write([\n\t\t\t\t`<!DOCTYPE html>`,\n\t\t\t\t`<meta charset=\"utf-8\" />`,\n\t\t\t\t`<title>404 Not Found</title>`,\n\t\t\t\t`<style> :root { font-family: sans-serif; color-scheme: dark light } </style>`,\n\t\t\t\t`<h1>Error 404</h1>`,\n\t\t\t\t`<p>${pathname} was not found</p>`,\n\t\t\t].join(\"\\n\"));\n\t\t\tresponse.end();\n\t\t}\n\t}\n});\n\nconsole.log(`Listening at ${useHTTPS ? \"https\" : \"http\"}://localhost${cmdArgs.has(\"port\") ? `:${port}` : \"\"}/ ...`);\n\nconsole.log(cmdArgs.has(\"port\"), port, useHTTPS);\n\nserver.listen({\n\tport,\n\thost: \"localhost\",\n});\n\n// if (useHTTPS) {\n// \tconst redirectionServer = HTTP.createServer({}, async (request, response) => {\n// \t\tresponse.writeHead(303, {\n// \t\t\t...corsHeaders,\n// \t\t\t\"location\": new URL(new URL(request.url, \"http://a\").pathname, `https://localhost:${port}`).href,\n// \t\t});\n// \t\tresponse.end();\n// \t});\n// \t// redirectionServer.listen({\n// \t// \tport: cmdArgs.has(\"port\") ? port : 80,\n// \t// \thost: \"localhost\",\n// \t// });\n// }\n"]}